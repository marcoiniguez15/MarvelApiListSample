//
//  CharacterDetailViewController.swift
//  MarvelAPIListSample
//
//  Created by marco.iniguez.ollero on 6/7/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol CharacterDetailDisplayLogic where Self: UIViewController {
  
  func displayViewModel(_ viewModel: CharacterDetailModel.ViewModel)
}

final class CharacterDetailViewController: BaseViewController {
  
  typealias CharacterDetailFactory = CharacterDetailInteractorFactorable & CharacterDetailRouterFactorable

  private let mainView: CharacterDetailView
  private var interactor: CharacterDetailInteractable!
  private var router: CharacterDetailRouting!
  override var isNavigationBarHidden: Bool { false }

  required init(factory: CharacterDetailFactory, mainView: CharacterDetailView, dataSource: CharacterDetailModel.DataSource) {
    self.mainView = mainView
    
    super.init(nibName: nil, bundle: nil)
    
    let interactorFactory = factory as! CharacterDetailInteractorFactorable.InteractableFactory
    interactor = factory.makeInteractor(factory: interactorFactory, viewController: self, dataSource: dataSource)
    router = factory.makeRouter(viewController: self)
  }
  
  override func viewDidLoad() {
    super.viewDidLoad()
    interactor.doRequest(.prepareCharactersDetail)
  }
  
  override func loadView() {
    mainView.delegate = self
    view = mainView
  }

  @available(*, unavailable)
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented, You shouldn't initialize the ViewController using Storyboards")
  }
}

// MARK: - CharacterDetailDisplayLogic
extension CharacterDetailViewController: CharacterDetailDisplayLogic {

  func displayViewModel(_ viewModel: CharacterDetailModel.ViewModel) {
    DispatchQueue.main.async {
      switch viewModel {

      case let .prepareCharactersDetail(viewModelData):
        self.navigationItem.title = viewModelData.title
        self.mainView.updateDataSource(with: viewModelData)
        
      case let .showError(model):
        self.router.routeTo(.showError(model: model))
      }
    }
  }
  
  func errorRetryRequest() {
    interactor.doRequest(.prepareCharactersDetail)
  }
}


// MARK: - CharacterDetailViewDelegate
extension CharacterDetailViewController: CharacterDetailViewDelegate {
  
}


// MARK: - Private Zone
private extension CharacterDetailViewController {
  
  
}
