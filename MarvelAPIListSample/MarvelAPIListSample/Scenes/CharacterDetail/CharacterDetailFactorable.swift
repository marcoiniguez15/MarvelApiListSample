//
//  CharacterDetailFactorable.swift
//  MarvelAPIListSample
//
//  Created by marco.iniguez.ollero on 6/7/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit


extension AppInjector {
  
  struct CharacterDetailInjector {}
}

extension AppInjector.CharacterDetailInjector: CharacterDetailFactorable {}

protocol CharacterDetailFactorable: CharacterDetailInteractorFactorable, CharacterDetailPresenterFactorable, CharacterDetailRouterFactorable, CharacterDetailServicesFactorable { }

protocol CharacterDetailInteractorFactorable {
  typealias InteractableFactory = CharacterDetailPresenterFactorable & CharacterDetailServicesFactorable
  
  func makeInteractor(factory: InteractableFactory, viewController: CharacterDetailDisplayLogic?, dataSource: CharacterDetailModel.DataSource) -> CharacterDetailInteractable
}

protocol CharacterDetailPresenterFactorable {
  func makePresenter(viewController: CharacterDetailDisplayLogic?) -> CharacterDetailPresentationLogic
}

protocol CharacterDetailRouterFactorable {
  func makeRouter(viewController: UIViewController?) -> CharacterDetailRouting
}

extension CharacterDetailFactorable {
  
  func makeInteractor(factory: InteractableFactory, viewController: CharacterDetailDisplayLogic?, dataSource: CharacterDetailModel.DataSource) -> CharacterDetailInteractable {
    CharacterDetailInteractor(factory: factory, viewController: viewController, dataSource: dataSource)
  }
  
  func makePresenter(viewController: CharacterDetailDisplayLogic?) -> CharacterDetailPresentationLogic {
    CharacterDetailPresenter(viewController: viewController)
  }
  
  func makeRouter(viewController: UIViewController?) -> CharacterDetailRouting {
    CharacterDetailRouter(viewController: viewController)
  }
}


// MARK: - Service Factorable
protocol CharacterDetailServicesFactorable {
  func makeApiService() -> APIClientProtocol
}

extension CharacterDetailServicesFactorable {
  
  func makeApiService() -> APIClientProtocol {
    APIClient.shared
  }
}
