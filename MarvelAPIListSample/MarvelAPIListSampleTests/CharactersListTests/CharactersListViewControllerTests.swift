//
//  CharactersListViewControllerTests.swift
//  MarvelAPIListSample
//
//  Created by marco.iniguez.ollero on 6/7/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import XCTest
@testable import MarvelAPIListSample


final class CharactersListViewControllerTests: XCTestCase {
  
  private var interactor: CharactersListInteractorSpy!
  private var viewController: CharactersListViewController!
  private var router: CharactersListRouterSpy!
  
  override func setUp() {
    viewController = CharactersListViewController(factory: self,
                                                            mainView: CharactersListView(),
                                                            dataSource: CharactersListModel.DataSource())
  }
  
  override func tearDown() {
    interactor = nil
    viewController = nil
    router = nil
  }
}



// MARK: - Tests
extension CharactersListViewControllerTests {
  
  func testItemPressed() {
    router.showDetailExpectation = expectation(description: "showDetailExpectation")
    let testId = 500
    viewController.displayViewModel(.showDetail(id: 500))
    wait(for: [router.showDetailExpectation], timeout: 0.1)
    XCTAssertEqual(testId, router.passedId)
  }
  
  func testShowError() {
    router.errorExpectation = expectation(description: "errorExpectation")
    let testErrorModel = ErrorHelper.createGenericError()
    viewController.displayViewModel(.showError(model: testErrorModel))
    wait(for: [router.errorExpectation], timeout: 0.1)
    XCTAssertEqual(testErrorModel.message, router.passedErrorModel.message)
   
  }
  
  func testPrepareCharactersList() {
    let testViewData = CharactersListModel.ViewDataSource(title: "Title", items: [])
    viewController.displayViewModel(.prepareCharactersList(viewModelData: testViewData))
  }
}


// MARK: - LoginFactorable, Injector
extension CharactersListViewControllerTests: CharactersListFactorable {
  
  func makeInteractor(factory: InteractableFactory,
                      viewController: CharactersListDisplayLogic?,
                      dataSource: CharactersListModel.DataSource) -> CharactersListInteractable {
    interactor = CharactersListInteractorSpy(dataSource: dataSource)
    return interactor
  }
  
  func makeRouter(viewController: UIViewController?) -> CharactersListRouting {
    router = CharactersListRouterSpy()
    return router
  }
}


// MARK: - Spy Classes Setup
private extension CharactersListViewControllerTests {
  
  final class CharactersListInteractorSpy: CharactersListInteractable {
    var dataSource: CharactersListModel.DataSource
    
    var passedIndex: Int!
    var passedPage: Int!

    init(dataSource: CharactersListModel.DataSource) {
      self.dataSource = dataSource
    }
    
    func doRequest(_ request: CharactersListModel.Request) {

      switch request {
      case let .itemPressed(index):
        passedIndex = index
        
      case let .prepareCharactersList(page):
        passedPage = page
      }
    }
  }
  
  final class CharactersListRouterSpy: CharactersListRouting {
    var passedId: Int!
    var passedErrorModel: ErrorModel!
    var showDetailExpectation: XCTestExpectation!
    var errorExpectation: XCTestExpectation!

    func routeTo(_ route: CharactersListModel.Route) {
      
      switch route {
      case let .showCharacterDetail(id):
        passedId = id
        showDetailExpectation.fulfill()
        
      case let .showError(model):
        passedErrorModel = model
        errorExpectation.fulfill()
      }
    }
  }
}
